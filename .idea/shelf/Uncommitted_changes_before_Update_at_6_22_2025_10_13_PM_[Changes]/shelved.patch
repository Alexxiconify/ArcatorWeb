Index: navbar.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// navbar.js\r\n// This file handles loading the navigation bar HTML and managing user authentication state\r\n// and theme application based on user preferences.\r\n\r\n// --- Firebase Imports ---\r\nimport { onAuthStateChanged } => \"https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js\";\r\n\r\n// --- Local Module Imports --\r\n// Import applyTheme and getAvailableThemes from themes.js\r\nimport { applyTheme, getAvailableThemes, setupThemesFirebase } from './themes.js';\r\n// Import shared Firebase instances and utilities from firebase-init.js\r\nimport { db, appId, auth, getUserProfileFromFirestore, firebaseReadyPromise, DEFAULT_PROFILE_PIC, DEFAULT_THEME_NAME } from './firebase-init.js';\r\n\r\n/**\r\n * Loads the navigation bar HTML into the 'navbar-placeholder' element\r\n * and sets up its dynamic behavior based on user authentication status.\r\n * It also applies the user's theme preference.\r\n * @param {object} firebaseInstances - Object containing auth, db, appId.\r\n * @param {string} defaultProfilePic - Default profile picture URL.\r\n * @param {string} defaultThemeName - Default theme ID.\r\n */\r\nexport async function loadNavbar(firebaseInstances, defaultProfilePic, defaultThemeName) {\r\n  const navbarPlaceholder = document.getElementById('navbar-placeholder');\r\n  console.log(\"DEBUG: loadNavbar function called.\");\r\n\r\n  if (navbarPlaceholder) {\r\n    console.log(\"DEBUG: 'navbar-placeholder' element found.\");\r\n    try {\r\n      console.log(\"DEBUG: Attempting to fetch 'navbar.html'...\");\r\n      const response = await fetch('navbar.html'); // Assuming navbar.html exists at root\r\n      if (!response.ok) {\r\n        console.error(`ERROR: Failed to fetch navbar.html. HTTP error! status: ${response.status}`);\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const navbarHtml = await response.text();\r\n      navbarPlaceholder.innerHTML = navbarHtml;\r\n      console.log(\"DEBUG: 'navbar.html' fetched and injected successfully.\");\r\n\r\n      const navbarUserIcon = document.getElementById('navbar-user-profile-pic');\r\n      const navbarUserDisplayName = document.getElementById('navbar-user-display-name');\r\n      const navbarUserSettingsLink = document.getElementById('navbar-user-settings-link');\r\n      const navbarSigninLink = document.getElementById('navbar-signin-link');\r\n      const navbarUserIdDisplay = document.getElementById('navbar-user-id-display');\r\n\r\n      // Ensure Firebase is ready before setting up auth state listener and themes\r\n      await firebaseReadyPromise;\r\n      console.log(\"DEBUG: Firebase ready promise resolved in navbar.js.\");\r\n\r\n      // Note: setupThemesFirebase is typically called once in a main entry point (e.g., settings.js).\r\n      // Redundant calls here are fine but not strictly necessary if already called globally.\r\n      // This ensures themes.js has access to Firebase instances.\r\n      if (firebaseInstances.db && firebaseInstances.auth && firebaseInstances.appId) {\r\n        setupThemesFirebase(firebaseInstances.db, firebaseInstances.auth, firebaseInstances.appId);\r\n        console.log(\"DEBUG: setupThemesFirebase called from navbar.js.\");\r\n      } else {\r\n        console.warn(\"Firebase instances not fully available in loadNavbar for theme setup.\");\r\n      }\r\n\r\n      // Listen for auth state changes to update the navbar UI\r\n      onAuthStateChanged(firebaseInstances.auth, async (user) => {\r\n        console.log(\"DEBUG: onAuthStateChanged triggered in navbar.js. User:\", user ? user.uid : \"null\");\r\n        if (user) {\r\n          // User is signed in\r\n          if (navbarUserSettingsLink) navbarUserSettingsLink.style.display = 'flex';\r\n          if (navbarSigninLink) navbarSigninLink.style.display = 'none';\r\n\r\n          const userProfile = await getUserProfileFromFirestore(user.uid);\r\n          console.log(\"DEBUG: User profile fetched in navbar.js:\", userProfile);\r\n\r\n          const displayName = userProfile?.displayName || user.displayName || 'Settings';\r\n          const photoURL = userProfile?.photoURL || user.photoURL || defaultProfilePic;\r\n          const userId = user.uid; // Always display full UID\r\n\r\n          if (navbarUserDisplayName) navbarUserDisplayName.textContent = displayName;\r\n          if (navbarUserIcon) navbarUserIcon.src = photoURL;\r\n          if (navbarUserIdDisplay) navbarUserIdDisplay.textContent = `UID: ${userId}`;\r\n          console.log(\"DEBUG: Navbar UI updated for logged-in user.\");\r\n\r\n          // Apply user's theme preference.\r\n          // applyTheme handles finding the theme and its own fallbacks.\r\n          let userThemePreference = userProfile?.themePreference || defaultThemeName;\r\n          console.log(\"DEBUG: Applying user theme preference:\", userThemePreference);\r\n          await applyTheme(userThemePreference); // Rely on applyTheme's internal fallback logic\r\n\r\n        } else {\r\n          // User is signed out\r\n          if (navbarUserSettingsLink) navbarUserSettingsLink.style.display = 'none';\r\n          if (navbarSigninLink) navbarSigninLink.style.display = 'flex';\r\n          if (navbarUserIcon) navbarUserIcon.src = defaultProfilePic;\r\n          if (navbarUserDisplayName) navbarUserDisplayName.textContent = 'Sign In';\r\n          if (navbarUserIdDisplay) navbarUserIdDisplay.textContent = ''; // Clear UID for guests\r\n          console.log(\"DEBUG: Navbar UI updated for logged-out user.\");\r\n\r\n          // Apply default theme if no user is logged in\r\n          console.log(\"DEBUG: Applying default theme for logged-out user:\", defaultThemeName);\r\n          await applyTheme(defaultThemeName); // Rely on applyTheme's internal fallback logic\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error(\"ERROR: Failed to load navigation bar:\", error);\r\n      // Fallback UI if fetching/parsing navbar.html fails\r\n      const manualNavbar = `\r\n        <nav class=\"navbar-bg p-4 shadow-lg w-full\">\r\n          <div class=\"container mx-auto flex justify-between items-center\">\r\n            <a href=\"index.html\" class=\"text-gray-50 text-2xl font-bold\">Arcator.co.uk</a>\r\n            <div>\r\n              <a href=\"sign.html\" class=\"text-gray-300 hover:text-gray-50 px-3 py-2 rounded-md text-lg font-medium\">Sign In / Account</a>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      `;\r\n      if (navbarPlaceholder) navbarPlaceholder.innerHTML = manualNavbar;\r\n      console.log(\"DEBUG: Fallback manual navbar injected due to error.\");\r\n    }\r\n  } else {\r\n    console.error(\"ERROR: 'navbar-placeholder' element not found in the HTML. Cannot load navbar.\");\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/navbar.js b/navbar.js
--- a/navbar.js	(revision f83a228d6f43320984dcd203279635b3d42cc506)
+++ b/navbar.js	(date 1750652007433)
@@ -3,7 +3,7 @@
 // and theme application based on user preferences.
 
 // --- Firebase Imports ---
-import { onAuthStateChanged } => "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
+import { onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
 
 // --- Local Module Imports --
 // Import applyTheme and getAvailableThemes from themes.js
