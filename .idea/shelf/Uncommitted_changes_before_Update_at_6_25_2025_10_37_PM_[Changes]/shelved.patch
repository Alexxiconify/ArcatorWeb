Index: forms.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// forms.js: Centralized JavaScript for Forms page, encompassing Firebase, utilities, theme, navbar, and core forms logic.\r\n\r\n// --- Firebase SDK Imports ---\r\nimport { initializeApp, getApps, getApp } from \"https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js\";\r\nimport { getAuth, onAuthStateChanged, signInAnonymously, signInWithCustomToken } from \"https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js\";\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  setDoc,\r\n  deleteDoc,\r\n  collection,\r\n  query,\r\n  orderBy,\r\n  addDoc,\r\n  serverTimestamp,\r\n  onSnapshot,\r\n  getDocs,\r\n  where\r\n} from \"https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js\";\r\n\r\n// --- Global Firebase Instances and Constants ---\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyCP5Zb1CRermAKn7p_S30E8qzCbvsMxhm4\",\r\n  authDomain: \"arcator-web.firebaseapp.com\",\r\n  projectId: \"arcator-web\",\r\n  storageBucket: \"arcator-web.firebasestorage.app\",\r\n  messagingSenderId: \"1033082068049\",\r\n  appId: \"1:1033082068049:web:dd154c8b188bde1930ec70\",\r\n  measurementId: \"G-DJXNT1L7CM\"\r\n};\r\n\r\nconst canvasAppId = typeof __app_id !== 'undefined' ? __app_id : null;\r\nwindow.appId = canvasAppId || firebaseConfig.projectId || 'default-app-id';\r\n\r\nwindow.app;\r\nwindow.auth;\r\nwindow.db;\r\nwindow.currentUser = null;\r\n\r\nwindow.DEFAULT_PROFILE_PIC = 'https://placehold.co/32x32/1F2937/E5E7EB?text=AV';\r\nwindow.DEFAULT_THEME_NAME = 'dark';\r\nwindow.ADMIN_UIDS = ['uOaZ8v76y2Q0X7PzJtU7Y3A2C1B4'];\r\n\r\nlet firebaseReadyResolve;\r\nwindow.firebaseReadyPromise = new Promise((resolve) => {\r\n  firebaseReadyResolve = resolve;\r\n});\r\n\r\n// Retrieves user profile from Firestore.\r\nwindow.getUserProfileFromFirestore = async function(uid) {\r\n  await window.firebaseReadyPromise;\r\n  if (!window.db) {\r\n    console.error(\"Firestore DB not initialized.\");\r\n    return null;\r\n  }\r\n  const userDocRef = doc(window.db, `artifacts/${window.appId}/public/data/user_profiles`, uid);\r\n  try {\r\n    const docSnap = await getDoc(userDocRef);\r\n    if (docSnap.exists()) {\r\n      return { uid: docSnap.id, ...docSnap.data() };\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error fetching user profile:\", error);\r\n  }\r\n  return null;\r\n};\r\n\r\n// Sets or updates user profile in Firestore.\r\nwindow.setUserProfileInFirestore = async function(uid, profileData) {\r\n  await window.firebaseReadyPromise;\r\n  if (!window.db) { console.error(\"Firestore DB not initialized.\"); return false; }\r\n  const userDocRef = doc(window.db, `artifacts/${window.appId}/public/data/user_profiles`, uid);\r\n  try {\r\n    await setDoc(userDocRef, profileData, { merge: true });\r\n    if (window.currentUser && window.currentUser.uid === uid) { window.currentUser = { ...window.currentUser, ...profileData }; }\r\n    console.log(\"User profile updated in Firestore for UID:\", uid);\r\n    return true;\r\n  }\r\n  catch (error) { console.error(\"Error updating user profile in Firestore:\", error); return false; }\r\n};\r\n\r\n// Deletes user profile from Firestore (currently commented out).\r\nwindow.deleteUserProfileFromFirestore = async function(uid) {\r\n  return false;\r\n};\r\n\r\n// Initializes Firebase app, authentication, and Firestore.\r\nasync function setupFirebaseAndUser() {\r\n  console.log(\"Setup Firebase and user.\");\r\n\r\n  if (getApps().length === 0) {\r\n    let finalFirebaseConfig = firebaseConfig;\r\n\r\n    if (typeof __firebase_config !== 'undefined' && __firebase_config !== null) {\r\n      if (typeof __firebase_config === 'string') {\r\n        try {\r\n          finalFirebaseConfig = JSON.parse(__firebase_config);\r\n          console.log(\"Parsed __firebase_config.\");\r\n        } catch (e) {\r\n          if (e instanceof SyntaxError && __firebase_config.trim() === '[object Object]') {\r\n            console.warn(\"WARN: __firebase_config is the literal string '[object Object]' and caused a parse error. Using hardcoded config.\");\r\n          } else {\r\n            console.error(\"Error parsing __firebase_config as JSON. Using hardcoded config.\", e);\r\n          }\r\n          finalFirebaseConfig = firebaseConfig;\r\n        }\r\n      } else if (typeof __firebase_config === 'object') {\r\n        finalFirebaseConfig = __firebase_config;\r\n        console.log(\"Using __firebase_config object directly.\");\r\n      } else {\r\n        console.warn(\"__firebase_config provided but not string or object. Using hardcoded config. Type:\", typeof __firebase_config);\r\n      }\r\n    } else {\r\n      console.log(\"__firebase_config not provided. Using hardcoded config.\");\r\n    }\r\n\r\n    try {\r\n      window.app = initializeApp(finalFirebaseConfig);\r\n      window.auth = getAuth(window.app);\r\n      window.db = getFirestore(window.app);\r\n      console.log(\"Firebase initialized.\");\r\n\r\n      const unsubscribe = onAuthStateChanged(window.auth, async (user) => {\r\n        console.log(\"Auth state changed. User:\", user ? user.uid : \"none\");\r\n        if (user) {\r\n          let userProfile = await window.getUserProfileFromFirestore(user.uid);\r\n          if (!userProfile) {\r\n            console.log(\"No profile found. Creating default.\");\r\n            userProfile = {\r\n              uid: user.uid, displayName: user.displayName || `User-${user.uid.substring(0, 6)}`,\r\n              email: user.email || null, photoURL: user.photoURL || window.DEFAULT_PROFILE_PIC,\r\n              createdAt: new Date(), lastLoginAt: new Date(), themePreference: window.DEFAULT_THEME_NAME,\r\n              isAdmin: window.ADMIN_UIDS.includes(user.uid)\r\n            };\r\n            await window.setUserProfileInFirestore(user.uid, userProfile);\r\n          } else {\r\n            await window.setUserProfileInFirestore(user.uid, { lastLoginAt: new Date(), isAdmin: window.ADMIN_UIDS.includes(user.uid) });\r\n            userProfile.isAdmin = window.ADMIN_UIDS.includes(user.uid);\r\n          }\r\n          window.currentUser = userProfile;\r\n          console.log(\"currentUser set:\", window.currentUser);\r\n        } else {\r\n          console.log(\"User logged out. currentUser set to null.\");\r\n          window.currentUser = null;\r\n        }\r\n        firebaseReadyResolve();\r\n        unsubscribe(); // Unsubscribe after initial state received\r\n      });\r\n\r\n      if (typeof __initial_auth_token !== 'undefined' && __initial_auth_token) {\r\n        console.log(\"Signing in with custom token.\");\r\n        await signInWithCustomToken(window.auth, __initial_auth_token)\r\n          .then(() => console.log(\"Signed in with custom token.\"))\r\n          .catch((error) => {\r\n            console.error(\"Custom token sign-in failed:\", error);\r\n          });\r\n      } else {\r\n        console.log(\"__initial_auth_token not defined. Relying on platform for initial auth state.\");\r\n      }\r\n    } catch (e) {\r\n      console.error(\"Error initializing Firebase:\", e);\r\n      firebaseReadyResolve();\r\n    }\r\n  } else {\r\n    window.app = getApp();\r\n    window.db = getFirestore(window.app);\r\n    window.auth = getAuth(window.app);\r\n    console.log(\"Firebase app already initialized. Re-using instance.\");\r\n    firebaseReadyResolve();\r\n  }\r\n}\r\nsetupFirebaseAndUser();\r\n\r\n// --- Utility Functions ---\r\nconst messageBox = document.getElementById('message-box');\r\nlet messageBoxTimeout;\r\n\r\n// Displays a temporary message box.\r\nfunction showMessageBox(message, isError = false) {\r\n  if (!messageBox) {\r\n    console.error(\"Message box element not found.\");\r\n    return;\r\n  }\r\n  if (messageBoxTimeout) {\r\n    clearTimeout(messageBoxTimeout);\r\n  }\r\n  messageBox.textContent = message;\r\n  messageBox.className = 'message-box';\r\n  if (isError) {\r\n    messageBox.classList.add('error');\r\n  } else {\r\n    messageBox.classList.add('success');\r\n  }\r\n  messageBox.classList.add('show');\r\n  messageBoxTimeout = setTimeout(() => {\r\n    messageBox.classList.remove('show');\r\n  }, 3000);\r\n}\r\n\r\n// Sanitizes input string for a handle.\r\nfunction sanitizeHandle(input) {\r\n  return input.toLowerCase().replace(/[^a-z0-9_.]/g, '');\r\n}\r\n\r\nconst customConfirmModal = document.getElementById('custom-confirm-modal');\r\nconst confirmMessage = document.getElementById('confirm-message');\r\nconst confirmSubmessage = document.getElementById('confirm-submessage');\r\nconst confirmYesButton = document.getElementById('confirm-yes');\r\nconst confirmNoButton = document.getElementById('confirm-no');\r\nconst closeButton = document.querySelector('.custom-confirm-modal .close-button');\r\nlet resolveConfirmPromise;\r\n\r\n// Displays a custom confirmation modal.\r\nfunction showCustomConfirm(message, submessage = '') {\r\n  if (!customConfirmModal || !confirmMessage || !confirmYesButton || !confirmNoButton || !closeButton) {\r\n    console.error(\"Custom confirmation modal elements not found.\");\r\n    return Promise.resolve(false);\r\n  }\r\n  confirmMessage.textContent = message;\r\n  confirmSubmessage.textContent = submessage;\r\n  customConfirmModal.style.display = 'flex';\r\n  return new Promise((resolve) => {\r\n    resolveConfirmPromise = resolve;\r\n    confirmYesButton.onclick = () => { customConfirmModal.style.display = 'none'; resolveConfirmPromise(true); };\r\n    confirmNoButton.onclick = () => { customConfirmModal.style.display = 'none'; resolveConfirmPromise(false); };\r\n    closeButton.onclick = () => { customConfirmModal.style.display = 'none'; resolveConfirmPromise(false); };\r\n    customConfirmModal.onclick = (event) => {\r\n      if (event.target === customConfirmModal) { customConfirmModal.style.display = 'none'; resolveConfirmPromise(false); }\r\n    };\r\n  });\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  if (customConfirmModal) {\r\n    console.log(\"Custom confirm modal element found.\");\r\n    if (customConfirmModal.style.display === '' || customConfirmModal.style.display === 'block') {\r\n      customConfirmModal.style.display = 'none';\r\n      console.log(\"Custom confirm modal forcibly hidden.\");\r\n    }\r\n  }\r\n});\r\n\r\n\r\n// --- Theme Management Functions ---\r\nlet _db;\r\nlet _auth;\r\nlet _appId;\r\nlet _themeSelect;\r\nlet _allThemes = [];\r\n\r\nconst predefinedThemes = [\r\n  {\r\n    id: 'dark', name: 'Dark Theme',\r\n    variables: {\r\n      '--color-body-bg': '#1a202c', '--color-text-primary': '#e2e8f0', '--color-text-secondary': '#a0aec0',\r\n      '--color-link': '#63b3ed', '--color-link-hover': '#4299e1', '--color-navbar-bg': '#2d3748',\r\n      '--color-card-bg': '#2d3748', '--color-input-bg': '#4a5568', '--color-input-border': '#2d3748',\r\n      '--color-button-bg-primary': '#4299e1', '--color-button-text': '#ffffff',\r\n      '--color-button-hover-primary': '#3182ce', '--color-bg-card': '#2d3748',\r\n      '--color-heading-main': '#F9FAFB',\r\n      '--color-heading-card': '#93C5FD'\r\n    }\r\n  },\r\n  {\r\n    id: 'light', name: 'Light Theme',\r\n    variables: {\r\n      '--color-body-bg': '#f7fafc', '--color-text-primary': '#2d3748', '--color-text-secondary': '#4a5568',\r\n      '--color-link': '#3182ce', '--color-link-hover': '#2b6cb0', '--color-navbar-bg': '#ffffff',\r\n      '--color-card-bg': '#ffffff', '--color-input-bg': '#edf2f7', '--color-input-border': '#e2e8f0',\r\n      '--color-button-bg-primary': '#3182ce', '--color-button-text': '#ffffff',\r\n      '--color-button-hover-primary': '#2b6cb0', '--color-bg-card': '#ffffff',\r\n      '--color-heading-main': '#1F2937',\r\n      '--color-heading-card': '#3B82F6'\r\n    }\r\n  }\r\n];\r\n\r\n// Sets up Firebase instances for theme management.\r\nwindow.setupThemesFirebase = function(dbInstance, authInstance, appIdInstance) {\r\n  _db = dbInstance;\r\n  _auth = authInstance;\r\n  _appId = appIdInstance;\r\n  _themeSelect = document.getElementById('theme-select');\r\n  console.log(\"Themes Firebase setup complete.\");\r\n};\r\n\r\n// Fetches custom themes from Firestore.\r\nasync function fetchCustomThemes() {\r\n  if (!_db || !_auth || !_auth.currentUser) {\r\n    console.log(\"Not fetching custom themes - DB not ready or user not logged in.\");\r\n    return [];\r\n  }\r\n  const userId = _auth.currentUser.uid;\r\n  const customThemesColRef = collection(_db, `artifacts/${_appId}/users/${userId}/custom_themes`);\r\n  try {\r\n    const querySnapshot = await getDocs(customThemesColRef);\r\n    const customThemes = querySnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\r\n    console.log(\"Fetched custom themes:\", customThemes.length);\r\n    return customThemes;\r\n  } catch (error) {\r\n    console.error(\"Error fetching custom themes:\", error);\r\n    return [];\r\n  }\r\n}\r\n\r\n// Saves a custom theme to Firestore.\r\nasync function saveCustomTheme(theme) {\r\n  if (!_db || !_auth || !_auth.currentUser) {\r\n    showMessageBox(\"Please sign in to save custom themes.\", true);\r\n    return false;\r\n  }\r\n  const userId = _auth.currentUser.uid;\r\n  const themeDocRef = doc(_db, `artifacts/${_appId}/users/${userId}/custom_themes`, theme.id);\r\n  try {\r\n    await setDoc(themeDocRef, theme);\r\n    showMessageBox(\"Theme saved successfully!\", false);\r\n    console.log(\"Theme saved for user.\", theme.id);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error saving custom theme:\", error);\r\n    showMessageBox(\"Failed to save theme.\", true);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Deletes a custom theme from Firestore.\r\nasync function deleteCustomTheme(themeId) {\r\n  if (!_db || !_auth || !_auth.currentUser) {\r\n    showMessageBox(\"Please sign in to delete custom themes.\", true);\r\n    return false;\r\n  }\r\n  const userId = _auth.currentUser.uid;\r\n  const themeDocRef = doc(_db, `artifacts/${_appId}/users/${userId}/custom_themes`, themeId);\r\n  try {\r\n    await deleteDoc(themeDocRef);\r\n    showMessageBox(\"Theme deleted successfully!\", false);\r\n    console.log(\"Theme deleted.\", themeId);\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error deleting custom theme:\", error);\r\n    showMessageBox(\"Failed to delete theme.\", true);\r\n    return false;\r\n  }\r\n}\r\n\r\n// Applies a theme by setting CSS variables.\r\nwindow.applyTheme = async function(themeId, themeObject = null) {\r\n  let themeToApply = themeObject;\r\n  if (!themeToApply) {\r\n    _allThemes = [...predefinedThemes, ...(await fetchCustomThemes())];\r\n    themeToApply = _allThemes.find(t => t.id === themeId);\r\n  }\r\n  if (!themeToApply) {\r\n    console.warn(`Theme '${themeId}' not found. Applying default theme.`);\r\n    themeToApply = predefinedThemes.find(t => t.id === window.DEFAULT_THEME_NAME) || predefinedThemes[0];\r\n  }\r\n  if (themeToApply && themeToApply.variables) {\r\n    for (const [key, value] of Object.entries(themeToApply.variables)) {\r\n      document.documentElement.style.setProperty(key, value);\r\n    }\r\n    console.log(`Applied theme: ${themeToApply.name} (${themeToApply.id})`);\r\n  } else {\r\n    console.error(`Failed to apply theme: ${themeId}. Variables not found.`);\r\n  }\r\n};\r\n\r\n// Populates the theme selection dropdown.\r\nasync function populateThemeSelect() {\r\n  _allThemes = [...predefinedThemes, ...(await fetchCustomThemes())];\r\n  if (_themeSelect) {\r\n    _themeSelect.innerHTML = '';\r\n    _allThemes.forEach(theme => {\r\n      const option = document.createElement('option');\r\n      option.value = theme.id;\r\n      option.textContent = theme.name;\r\n      _themeSelect.appendChild(option);\r\n    });\r\n    console.log(\"Theme select populated with\", _allThemes.length, \"themes.\");\r\n  } else {\r\n    console.log(\"Theme select element not found.\");\r\n  }\r\n}\r\n\r\n// Returns available themes.\r\nwindow.getAvailableThemes = async function() {\r\n  if (_allThemes.length === 0) { await populateThemeSelect(); }\r\n  return _allThemes;\r\n};\r\n\r\n// --- Navbar Loading Function ---\r\nwindow.loadNavbar = async function(user, defaultProfilePic, defaultThemeName) {\r\n  const navbarPlaceholder = document.getElementById('navbar-placeholder');\r\n  console.log(\"Loading navbar.\");\r\n\r\n  if (navbarPlaceholder) {\r\n    console.log(\"Navbar placeholder found.\");\r\n    try {\r\n      const navbarHtml = `\r\n        <nav class=\"navbar-bg p-4 shadow-lg w-full\">\r\n          <div class=\"container mx-auto flex justify-between items-center\">\r\n            <a href=\"index.html\" class=\"text-gray-50 text-2xl font-bold\">Arcator.co.uk</a>\r\n            <div class=\"flex items-center space-x-4\">\r\n              <a href=\"users.html\" id=\"navbar-user-settings-link\" class=\"flex items-center text-gray-300 hover:text-gray-50 px-3 py-2 rounded-md text-lg font-medium\" style=\"display: ${user ? 'flex' : 'none'};\">\r\n                <img id=\"navbar-user-icon\" src=\"${user && user.photoURL ? user.photoURL : defaultProfilePic}\" alt=\"User Icon\" class=\"w-8 h-8 rounded-full mr-2 object-cover\">\r\n                <span id=\"navbar-user-display-name\">${user && user.displayName ? user.displayName : 'Loading...'}</span>\r\n                <span id=\"navbar-user-id-display\" class=\"text-xs text-gray-500 ml-2\">${user ? user.uid.substring(0, 6) : ''}</span>\r\n              </a>\r\n              <a href=\"users.html\" id=\"navbar-signin-link\" class=\"text-gray-300 hover:text-gray-50 px-3 py-2 rounded-md text-lg font-medium\" style=\"display: ${user ? 'none' : 'flex'};\">Sign In</a>\r\n              <button id=\"navbar-signout-btn\" class=\"text-gray-300 hover:text-gray-50 px-3 py-2 rounded-md text-lg font-medium\" style=\"display: ${user ? 'flex' : 'none'};\">Sign Out</button>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      `;\r\n      navbarPlaceholder.innerHTML = navbarHtml;\r\n      console.log(\"Navbar content injected.\");\r\n\r\n      const signoutButton = document.getElementById('navbar-signout-btn');\r\n      if (signoutButton) {\r\n        signoutButton.addEventListener('click', async () => {\r\n          try {\r\n            await window.auth.signOut();\r\n            console.log(\"User signed out.\");\r\n            window.location.href = 'users.html';\r\n          } catch (error) {\r\n            console.error(\"Error signing out:\", error);\r\n          }\r\n        });\r\n        console.log(\"Signout button event listener attached.\");\r\n      }\r\n\r\n      const navbarUserSettingsLink = document.getElementById('navbar-user-settings-link');\r\n      const navbarSigninLink = document.getElementById('navbar-signin-link');\r\n      const navbarUserIcon = document.getElementById('navbar-user-icon');\r\n      const navbarUserDisplayName = document.getElementById('navbar-user-display-name');\r\n      const navbarUserIdDisplay = document.getElementById('navbar-user-id-display');\r\n\r\n      if (user) {\r\n        if (navbarUserSettingsLink) navbarUserSettingsLink.style.display = 'flex';\r\n        if (navbarSigninLink) navbarSigninLink.style.display = 'none';\r\n        if (navbarUserIcon) navbarUserIcon.src = user.photoURL || defaultProfilePic;\r\n        if (navbarUserDisplayName) navbarUserDisplayName.textContent = user.displayName || 'Account';\r\n        if (navbarUserIdDisplay) navbarUserIdDisplay.textContent = user.uid ? user.uid.substring(0, 6) : '';\r\n        console.log(\"Navbar UI updated for logged-in user.\");\r\n      } else {\r\n        if (navbarUserSettingsLink) navbarUserSettingsLink.style.display = 'none';\r\n        if (navbarSigninLink) navbarSigninLink.style.display = 'flex';\r\n        if (navbarUserIcon) navbarUserIcon.src = defaultProfilePic;\r\n        if (navbarUserDisplayName) navbarUserDisplayName.textContent = 'Sign In';\r\n        if (navbarUserIdDisplay) navbarUserIdDisplay.textContent = '';\r\n        console.log(\"Navbar UI updated for logged-out user.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Failed to load navigation bar:\", error);\r\n      const manualNavbar = `\r\n        <nav class=\"navbar-bg p-4 shadow-lg w-full\">\r\n          <div class=\"container mx-auto flex justify-between items-center\">\r\n            <a href=\"index.html\" class=\"text-gray-50 text-2xl font-bold\">Arcator.co.uk</a>\r\n            <div>\r\n              <a href=\"users.html\" class=\"text-gray-300 hover:text-gray-50 px-3 py-2 rounded-md text-lg font-medium\">Sign In / Account</a>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      `;\r\n      if (navbarPlaceholder) navbarPlaceholder.innerHTML = manualNavbar;\r\n      console.log(\"Fallback manual navbar injected due to error.\");\r\n    }\r\n  } else {\r\n    console.error(\"Navbar placeholder element not found.\");\r\n  }\r\n};\r\n\r\n\r\n// --- Forms Page Specific Logic ---\r\n\r\n// DOM elements\r\nconst mainLoadingSpinner = document.getElementById('loading-spinner');\r\nconst formsContentSection = document.getElementById('forms-content');\r\nconst mainLoginRequiredMessage = document.getElementById('login-required-message');\r\n\r\nconst createThemaForm = document.getElementById('create-thema-form');\r\nconst newThemaNameInput = document.getElementById('new-thema-name');\r\nconst newThemaDescriptionInput = document.getElementById('new-thema-description');\r\nconst themaList = document.getElementById('thema-list');\r\n\r\nconst threadsSection = document.getElementById('threads-section');\r\nconst backToThematasBtn = document.getElementById('back-to-thematas-btn');\r\nconst currentThemaTitle = document.getElementById('current-thema-title');\r\nconst currentThemaDescription = document.getElementById('current-thema-description');\r\nconst createThreadForm = document.getElementById('create-thread-form');\r\nconst newThreadTitleInput = document.getElementById('new-thread-title');\r\nconst newThreadInitialCommentInput = document.getElementById('new-thread-initial-comment');\r\nconst threadList = document.getElementById('thread-list');\r\n\r\nconst commentsSection = document.getElementById('comments-section');\r\nconst backToThreadsBtn = document.getElementById('back-to-threads-btn');\r\nconst currentThreadTitle = document.getElementById('current-thread-title');\r\nconst currentThreadInitialComment = document.getElementById('current-thread-initial-comment');\r\nconst addCommentForm = document.getElementById('add-comment-form');\r\nconst newCommentContentInput = document.getElementById('new-comment-content');\r\nconst commentList = document.getElementById('comment-list');\r\n\r\nlet currentThemaId = null;\r\nlet currentThreadId = null;\r\nlet unsubscribeThemaComments = null;\r\nlet unsubscribeThreads = null;\r\nlet unsubscribeThematas = null;\r\n\r\n// Displays the main loading spinner.\r\nfunction showMainLoading() {\r\n  if (mainLoadingSpinner) mainLoadingSpinner.style.display = 'flex';\r\n  if (formsContentSection) formsContentSection.style.display = 'none';\r\n  if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'none';\r\n  console.log(\"Spinner visible, content hidden.\");\r\n}\r\n\r\n// Hides the main loading spinner.\r\nfunction hideMainLoading() {\r\n  if (mainLoadingSpinner) mainLoadingSpinner.style.display = 'none';\r\n  console.log(\"Spinner hidden.\");\r\n}\r\n\r\n// Updates UI visibility based on authentication and user profile readiness.\r\nasync function updateUIBasedOnAuthAndData() {\r\n  console.log(\"Updating UI based on auth and data.\");\r\n  hideMainLoading();\r\n\r\n  if (window.auth.currentUser) {\r\n    console.log(\"User logged in.\", window.auth.currentUser.uid);\r\n    let profileReady = false;\r\n    for (let i = 0; i < 30; i++) { // Max 3 seconds wait\r\n      if (window.currentUser && window.currentUser.uid === window.auth.currentUser.uid && typeof window.currentUser.displayName !== 'undefined' && window.currentUser.displayName !== null) {\r\n        profileReady = true;\r\n        console.log(\"currentUser profile ready after\", i * 100, \"ms.\");\r\n        break;\r\n      }\r\n      console.log(\"Waiting for currentUser to be set. Attempt:\", i + 1);\r\n      await new Promise(resolve => setTimeout(resolve, 100)); // Wait 100ms\r\n    }\r\n\r\n    if (profileReady) {\r\n      if (formsContentSection) formsContentSection.style.display = 'block';\r\n      if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'none';\r\n      console.log(\"Forms content visible, login message hidden.\");\r\n      renderThematas();\r\n    } else {\r\n      console.warn(\"currentUser profile not fully loaded after waiting. Showing login message.\");\r\n      showMessageBox(\"Failed to load user profile. Please try refreshing or logging in again.\", true);\r\n      if (formsContentSection) formsContentSection.style.display = 'none';\r\n      if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'block';\r\n    }\r\n  } else {\r\n    console.log(\"User NOT logged in. Showing login message.\");\r\n    if (formsContentSection) formsContentSection.style.display = 'none';\r\n    if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'block';\r\n  }\r\n}\r\n\r\n// Adds a new thema to Firestore.\r\nasync function addThema(name, description) {\r\n  if (!window.auth.currentUser) {\r\n    showMessageBox(\"You must be logged in to create a théma.\", true);\r\n    return;\r\n  }\r\n  if (!window.db) {\r\n    showMessageBox(\"Database not initialized.\", true);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const thematasCol = collection(window.db, `artifacts/${window.appId}/public/data/thematas`);\r\n    await addDoc(thematasCol, {\r\n      name: name,\r\n      description: description,\r\n      createdAt: serverTimestamp(),\r\n      createdBy: window.auth.currentUser.uid,\r\n      creatorDisplayName: window.currentUser ? window.currentUser.displayName : 'Anonymous'\r\n    });\r\n    showMessageBox(\"Théma created successfully!\", false);\r\n    newThemaNameInput.value = '';\r\n    newThemaDescriptionInput.value = '';\r\n    console.log(\"New théma added.\");\r\n  } catch (error) {\r\n    console.error(\"Error creating théma:\", error);\r\n    showMessageBox(`Error creating théma: ${error.message}`, true);\r\n  }\r\n}\r\n\r\n// Renders thémata from Firestore in real-time.\r\nfunction renderThematas() {\r\n  console.log(\"Rendering thematas. DB:\", !!window.db);\r\n  if (unsubscribeThematas) {\r\n    unsubscribeThematas();\r\n    console.log(\"Unsubscribed from previous thémata listener.\");\r\n  }\r\n  if (!window.db) {\r\n    themaList.innerHTML = '<li class=\"card p-4 text-center text-red-400\">Database not initialized. Cannot load thémata.</li>';\r\n    return;\r\n  }\r\n\r\n  const thematasCol = collection(window.db, `artifacts/${window.appId}/public/data/thematas`);\r\n  const q = query(thematasCol, orderBy(\"createdAt\", \"desc\"));\r\n\r\n  unsubscribeThematas = onSnapshot(q, async (snapshot) => {\r\n    console.log(\"onSnapshot callback fired for thematas. Changes:\", snapshot.docChanges().length);\r\n    themaList.innerHTML = '';\r\n    if (snapshot.empty) {\r\n      themaList.innerHTML = '<li class=\"card p-4 text-center\">No thémata found. Be the first to create one!</li>';\r\n      return;\r\n    }\r\n\r\n    const createdByUids = new Set();\r\n    snapshot.forEach(doc => {\r\n      const thema = doc.data();\r\n      if (thema.createdBy) {\r\n        createdByUids.add(thema.createdBy);\r\n      }\r\n    });\r\n\r\n    const userProfiles = {};\r\n    if (createdByUids.size > 0) {\r\n      const usersRef = collection(window.db, `artifacts/${window.appId}/public/data/user_profiles`);\r\n      const userQuery = query(usersRef, where('uid', 'in', Array.from(createdByUids)));\r\n      await getDocs(userQuery).then(userSnapshot => {\r\n        userSnapshot.forEach(userDoc => {\r\n          const userData = userDoc.data();\r\n          userProfiles[userDoc.id] = userData.displayName || 'Unknown User';\r\n        });\r\n      }).catch(error => console.error(\"Error fetching user profiles for thematas:\", error));\r\n    }\r\n\r\n    snapshot.forEach((doc) => {\r\n      const thema = doc.data();\r\n      const li = document.createElement('li');\r\n      li.classList.add('thema-item', 'card');\r\n      const createdAt = thema.createdAt ? new Date(thema.createdAt.toDate()).toLocaleString() : 'N/A';\r\n      const creatorDisplayName = userProfiles[thema.createdBy] || thema.creatorDisplayName || 'Unknown';\r\n\r\n      li.innerHTML = `\r\n            <h3 class=\"text-xl font-bold text-heading-card\">${thema.name}</h3>\r\n            <p class=\"thema-description mt-2\">${thema.description}</p>\r\n            <p class=\"meta-info\">Created by ${creatorDisplayName} on ${createdAt}</p>\r\n            <button data-thema-id=\"${doc.id}\" data-thema-name=\"${thema.name}\" data-thema-description=\"${thema.description}\" class=\"view-threads-btn btn-primary btn-blue mt-4\">View Threads</button>\r\n            ${(window.currentUser && window.currentUser.isAdmin) ? `<button data-thema-id=\"${doc.id}\" class=\"delete-thema-btn btn-primary btn-red ml-2 mt-4\">Delete</button>` : ''}\r\n        `;\r\n      themaList.appendChild(li);\r\n    });\r\n\r\n    document.querySelectorAll('.view-threads-btn').forEach(button => {\r\n      button.addEventListener('click', (event) => {\r\n        const themaId = event.target.dataset.themaId;\r\n        const themaName = event.target.dataset.themaName;\r\n        const themaDescription = event.target.dataset.themaDescription;\r\n        console.log(`View Threads clicked for themaId: ${themaId}`);\r\n        displayThreadsForThema(themaId, themaName, themaDescription);\r\n      });\r\n    });\r\n\r\n    document.querySelectorAll('.delete-thema-btn').forEach(button => {\r\n      button.addEventListener('click', async (event) => {\r\n        const themaId = event.target.dataset.themaId;\r\n        console.log(`Delete Théma clicked for themaId: ${themaId}`);\r\n        const confirmed = await showCustomConfirm(\"Are you sure you want to delete this théma?\", \"All threads and comments within it will also be deleted.\");\r\n        if (confirmed) {\r\n          await deleteThemaAndSubcollections(themaId);\r\n        } else {\r\n          showMessageBox(\"Théma deletion cancelled.\", false);\r\n        }\r\n      });\r\n    });\r\n  }, (error) => {\r\n    console.error(\"Error fetching thémata:\", error);\r\n    themaList.innerHTML = `<li class=\"card p-4 text-center text-red-400\">Error loading thémata: ${error.message}</li>`;\r\n  });\r\n}\r\n\r\n// Deletes a thema and all its subcollections (threads, comments).\r\nasync function deleteThemaAndSubcollections(themaId) {\r\n  try {\r\n    console.log(`Deleting thema: ${themaId}`);\r\n    const threadsRef = collection(window.db, `artifacts/${window.appId}/public/data/thematas/${themaId}/threads`);\r\n    const threadsSnapshot = await getDocs(threadsRef);\r\n    for (const threadDoc of threadsSnapshot.docs) {\r\n      const commentsRef = collection(window.db, `artifacts/${window.appId}/public/data/thematas/${themaId}/threads/${threadDoc.id}/comments`);\r\n      const commentsSnapshot = await getDocs(commentsRef);\r\n      for (const commentDoc of commentsSnapshot.docs) {\r\n        await deleteDoc(doc(commentsRef, commentDoc.id));\r\n      }\r\n      await deleteDoc(doc(threadsRef, threadDoc.id));\r\n    }\r\n    await deleteDoc(doc(window.db, `artifacts/${window.appId}/public/data/thematas`, themaId));\r\n\r\n    showMessageBox(\"Théma and all its content deleted successfully!\", false);\r\n    console.log(`Thema ${themaId} and all content deleted.`);\r\n  } catch (error) {\r\n    console.error(\"Error deleting théma and subcollections:\", error);\r\n    showMessageBox(`Error deleting théma: ${error.message}`, true);\r\n  }\r\n}\r\n\r\n// Displays threads for a selected thema.\r\nfunction displayThreadsForThema(themaId, themaName, themaDescription) {\r\n  currentThemaId = themaId;\r\n  currentThemaTitle.textContent = `Théma: ${themaName}`;\r\n  currentThemaDescription.textContent = themaDescription;\r\n\r\n  document.getElementById('create-thema-section').style.display = 'none';\r\n  themaList.style.display = 'none';\r\n  document.querySelector('#main-content > h2').style.display = 'none';\r\n  document.querySelector('#main-content > h3').style.display = 'none';\r\n\r\n  threadsSection.style.display = 'block';\r\n  commentsSection.style.display = 'none';\r\n\r\n  console.log(`Displaying threads for thema: ${themaId}`);\r\n  renderThreads();\r\n}\r\n\r\n// Adds a new comment thread to Firestore.\r\nasync function addCommentThread(themaId, title, initialComment) {\r\n  if (!window.auth.currentUser) {\r\n    showMessageBox(\"You must be logged in to create a thread.\", true);\r\n    return;\r\n  }\r\n  if (!window.db || !themaId) {\r\n    showMessageBox(\"Database or Théma not initialized.\", true);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const threadsCol = collection(window.db, `artifacts/${window.appId}/public/data/thematas/${themaId}/threads`);\r\n    await addDoc(threadsCol, {\r\n      title: title,\r\n      initialComment: initialComment,\r\n      createdAt: serverTimestamp(),\r\n      createdBy: window.auth.currentUser.uid,\r\n      creatorDisplayName: window.currentUser ? window.currentUser.displayName : 'Anonymous'\r\n    });\r\n    showMessageBox(\"Thread created successfully!\", false);\r\n    newThreadTitleInput.value = '';\r\n    newThreadInitialCommentInput.value = '';\r\n    console.log(\"New thread added.\");\r\n  } catch (error) {\r\n    console.error(\"Error creating thread:\", error);\r\n    showMessageBox(`Error creating thread: ${error.message}`, true);\r\n  }\r\n}\r\n\r\n// Renders comment threads for the current thema in real-time.\r\nfunction renderThreads() {\r\n  console.log(\"Rendering threads. DB:\", !!window.db, \"currentThemaId:\", currentThemaId);\r\n  if (unsubscribeThreads) {\r\n    unsubscribeThreads();\r\n    console.log(\"Unsubscribed from previous threads listener.\");\r\n  }\r\n  if (!window.db || !currentThemaId) {\r\n    threadList.innerHTML = '<li class=\"card p-4 text-center text-red-400\">Select a Théma to view threads.</li>';\r\n    return;\r\n  }\r\n\r\n  const threadsCol = collection(window.db, `artifacts/${window.appId}/public/data/thematas/${currentThemaId}/threads`);\r\n  const q = query(threadsCol, orderBy(\"createdAt\", \"desc\"));\r\n\r\n  unsubscribeThreads = onSnapshot(q, async (snapshot) => {\r\n    console.log(\"onSnapshot callback fired for threads. Changes:\", snapshot.docChanges().length);\r\n    threadList.innerHTML = '';\r\n    if (snapshot.empty) {\r\n      threadList.innerHTML = '<li class=\"card p-4 text-center\">No threads yet. Be the first to start one!</li>';\r\n      return;\r\n    }\r\n\r\n    const threadCreatedByUids = new Set();\r\n    snapshot.forEach(doc => {\r\n      const thread = doc.data();\r\n      if (thread.createdBy) {\r\n        threadCreatedByUids.add(thread.createdBy);\r\n      }\r\n    });\r\n\r\n    const threadUserProfiles = {};\r\n    if (threadCreatedByUids.size > 0) {\r\n      const usersRef = collection(window.db, `artifacts/${window.appId}/public/data/user_profiles`);\r\n      const threadUserQuery = query(usersRef, where('uid', 'in', Array.from(threadCreatedByUids)));\r\n      await getDocs(threadUserQuery).then(userSnapshot => {\r\n        userSnapshot.forEach(userDoc => {\r\n          const userData = userDoc.data();\r\n          threadUserProfiles[userDoc.id] = userData.displayName || 'Unknown User';\r\n        });\r\n      }).catch(error => console.error(\"Error fetching user profiles for threads:\", error));\r\n    }\r\n\r\n    snapshot.forEach((doc) => {\r\n      const thread = doc.data();\r\n      const li = document.createElement('li');\r\n      li.classList.add('thread-item', 'card');\r\n      const createdAt = thread.createdAt ? new Date(thread.createdAt.toDate()).toLocaleString() : 'N/A';\r\n      const creatorDisplayName = threadUserProfiles[thread.createdBy] || thread.creatorDisplayName || 'Unknown';\r\n\r\n      li.innerHTML = `\r\n        <h3 class=\"text-xl font-bold text-heading-card\">${thread.title}</h3>\r\n        <p class=\"thread-initial-comment mt-2\">${thread.initialComment}</p>\r\n        <p class=\"meta-info\">Started by ${creatorDisplayName} on ${createdAt}</p>\r\n        <button data-thread-id=\"${doc.id}\" data-thread-title=\"${thread.title}\" data-thread-initial-comment=\"${thread.initialComment}\" class=\"view-comments-btn btn-primary btn-green mt-4\">View Comments</button>\r\n        ${(window.currentUser && window.currentUser.isAdmin) ? `<button data-thread-id=\"${doc.id}\" class=\"delete-thread-btn btn-primary btn-red ml-2 mt-4\">Delete</button>` : ''}\r\n      `;\r\n      threadList.appendChild(li);\r\n    });\r\n\r\n    document.querySelectorAll('.view-comments-btn').forEach(button => {\r\n      button.addEventListener('click', (event) => {\r\n        const threadId = event.target.dataset.threadId;\r\n        const threadTitle = event.target.dataset.threadTitle;\r\n        const threadInitialComment = event.target.dataset.threadInitialComment;\r\n        console.log(`View Comments clicked for threadId: ${threadId}`);\r\n        displayCommentsForThread(threadId, threadTitle, threadInitialComment);\r\n      });\r\n    });\r\n\r\n    document.querySelectorAll('.delete-thread-btn').forEach(button => {\r\n      button.addEventListener('click', async (event) => {\r\n        const threadId = event.target.dataset.threadId;\r\n        console.log(`Delete Thread clicked for threadId: ${threadId}`);\r\n        const confirmed = await showCustomConfirm(\"Are you sure you want to delete this thread?\", \"All comments within it will also be deleted.\");\r\n        if (confirmed) {\r\n          await deleteThreadAndSubcollection(currentThemaId, threadId);\r\n        } else {\r\n          showMessageBox(\"Thread deletion cancelled.\", false);\r\n        }\r\n      });\r\n    });\r\n  }, (error) => {\r\n    console.error(\"Error fetching threads:\", error);\r\n    threadList.innerHTML = `<li class=\"card p-4 text-center text-red-400\">Error loading threads: ${error.message}</li>`;\r\n  });\r\n}\r\n\r\n// Deletes a thread and its comments.\r\nasync function deleteThreadAndSubcollection(themaId, threadId) {\r\n  try {\r\n    console.log(`Deleting thread: ${threadId}`);\r\n    const commentsRef = collection(window.db, `artifacts/${window.appId}/public/data/thematas/${themaId}/threads/${threadId}/comments`);\r\n    const commentsSnapshot = await getDocs(commentsRef);\r\n    for (const commentDoc of commentsSnapshot.docs) {\r\n      await deleteDoc(doc(commentsRef, commentDoc.id));\r\n    }\r\n    await deleteDoc(doc(window.db, `artifacts/${window.appId}/public/data/thematas/${themaId}/threads`, threadId));\r\n\r\n    showMessageBox(\"Thread and its comments deleted successfully!\", false);\r\n    console.log(`Thread ${threadId} and comments deleted.`);\r\n  } catch (error) {\r\n    console.error(\"Error deleting thread and subcollection:\", error);\r\n    showMessageBox(`Error deleting thread: ${error.message}`, true);\r\n  }\r\n}\r\n\r\n// Displays comments for a selected thread.\r\nfunction displayCommentsForThread(threadId, threadTitle, threadInitialComment) {\r\n  currentThreadId = threadId;\r\n  currentThreadTitle.textContent = `Thread: ${threadTitle}`;\r\n  currentThreadInitialComment.textContent = threadInitialComment;\r\n\r\n  threadsSection.style.display = 'none';\r\n  commentsSection.style.display = 'block';\r\n\r\n  console.log(`Displaying comments for thread: ${threadId}`);\r\n  renderComments();\r\n}\r\n\r\n// Adds a new comment to Firestore.\r\nasync function addComment(themaId, threadId, content) {\r\n  if (!window.auth.currentUser) {\r\n    showMessageBox(\"You must be logged in to add a comment.\", true);\r\n    return;\r\n  }\r\n  if (!window.db || !themaId || !threadId) {\r\n    showMessageBox(\"Database, Théma, or Thread not initialized.\", true);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const commentsCol = collection(window.db, `artifacts/${window.appId}/public/data/thematas/${themaId}/threads/${threadId}/comments`);\r\n    await addDoc(commentsCol, {\r\n      content: content,\r\n      createdAt: serverTimestamp(),\r\n      createdBy: window.auth.currentUser.uid,\r\n      creatorDisplayName: window.currentUser ? window.currentUser.displayName : 'Anonymous'\r\n    });\r\n    showMessageBox(\"Comment posted successfully!\", false);\r\n    newCommentContentInput.value = '';\r\n    console.log(\"New comment added.\");\r\n  } catch (error) {\r\n    console.error(\"Error posting comment:\", error);\r\n    showMessageBox(`Error posting comment: ${error.message}`, true);\r\n  }\r\n}\r\n\r\n// Renders comments for the current thread in real-time.\r\nfunction renderComments() {\r\n  console.log(\"Rendering comments. DB:\", !!window.db, \"currentThemaId:\", currentThemaId, \"currentThreadId:\", currentThreadId);\r\n  if (unsubscribeThemaComments) {\r\n    unsubscribeThemaComments();\r\n    console.log(\"Unsubscribed from previous comments listener.\");\r\n  }\r\n  if (!window.db || !currentThemaId || !currentThreadId) {\r\n    commentList.innerHTML = '<li class=\"card p-4 text-center text-red-400\">Select a Thread to view comments.</li>';\r\n    return;\r\n  }\r\n\r\n  const commentsCol = collection(window.db, `artifacts/${window.appId}/public/data/thematas/${currentThemaId}/threads/${currentThreadId}/comments`);\r\n  const q = query(commentsCol, orderBy(\"createdAt\", \"asc\"));\r\n\r\n  unsubscribeThemaComments = onSnapshot(q, async (snapshot) => {\r\n    console.log(\"onSnapshot callback fired for comments. Changes:\", snapshot.docChanges().length);\r\n    commentList.innerHTML = '';\r\n    if (snapshot.empty) {\r\n      commentList.innerHTML = '<li class=\"card p-4 text-center\">No comments yet. Be the first to comment!</li>';\r\n      return;\r\n    }\r\n\r\n    const commentCreatedByUids = new Set();\r\n    snapshot.forEach(doc => {\r\n      const comment = doc.data();\r\n      if (comment.createdBy) {\r\n        commentCreatedByUids.add(comment.createdBy);\r\n      }\r\n    });\r\n\r\n    const commentUserProfiles = {};\r\n    if (commentCreatedByUids.size > 0) {\r\n      const usersRef = collection(window.db, `artifacts/${window.appId}/public/data/user_profiles`);\r\n      const commentUserQuery = query(usersRef, where('uid', 'in', Array.from(commentCreatedByUids)));\r\n      await getDocs(commentUserQuery).then(userSnapshot => {\r\n        userSnapshot.forEach(userDoc => {\r\n          const userData = userDoc.data();\r\n          commentUserProfiles[userDoc.id] = userData.displayName || 'Unknown User';\r\n        });\r\n      }).catch(error => console.error(\"Error fetching user profiles for comments:\", error));\r\n    }\r\n\r\n    snapshot.forEach((doc) => {\r\n      const comment = doc.data();\r\n      const li = document.createElement('li');\r\n      li.classList.add('comment-item', 'card');\r\n      const createdAt = comment.createdAt ? new Date(comment.createdAt.toDate()).toLocaleString() : 'N/A';\r\n      const displayName = commentUserProfiles[comment.createdBy] || comment.creatorDisplayName || 'Unknown User';\r\n\r\n      li.innerHTML = `\r\n        <p class=\"comment-content\">${comment.content}</p>\r\n        <p class=\"meta-info\">By ${displayName} on ${createdAt}\r\n        ${(window.currentUser && window.currentUser.isAdmin) ? `<button data-comment-id=\"${doc.id}\" class=\"delete-comment-btn btn-primary btn-red ml-2 text-xs\">Delete</button>` : ''}\r\n        </p>\r\n      `;\r\n      commentList.appendChild(li);\r\n    });\r\n\r\n    document.querySelectorAll('.delete-comment-btn').forEach(button => {\r\n      button.addEventListener('click', async (event) => {\r\n        const commentId = event.target.dataset.commentId;\r\n        console.log(`Delete Comment clicked for commentId: ${commentId}`);\r\n        const confirmed = await showCustomConfirm(\"Are you sure you want to delete this comment?\", \"This action cannot be undone.\");\r\n        if (confirmed) {\r\n          await deleteComment(currentThemaId, currentThreadId, commentId);\r\n        } else {\r\n          showMessageBox(\"Comment deletion cancelled.\", false);\r\n        }\r\n      });\r\n    });\r\n  }, (error) => {\r\n    console.error(\"Error fetching comments:\", error);\r\n    commentList.innerHTML = `<li class=\"card p-4 text-center text-red-400\">Error loading comments: ${error.message}</li>`;\r\n  });\r\n}\r\n\r\n// Deletes a comment.\r\nasync function deleteComment(themaId, threadId, commentId) {\r\n  try {\r\n    console.log(`Deleting comment: ${commentId}`);\r\n    await deleteDoc(doc(window.db, `artifacts/${window.appId}/public/data/thematas/${themaId}/threads/${threadId}/comments`, commentId));\r\n    showMessageBox(\"Comment deleted successfully!\", false);\r\n    console.log(`Comment ${commentId} deleted.`);\r\n  } catch (error) {\r\n    console.error(\"Error deleting comment:\", error);\r\n    showMessageBox(`Error deleting comment: ${error.message}`, true);\r\n  }\r\n}\r\n\r\n\r\n// --- Event Listeners and Initial Load ---\r\ndocument.addEventListener('DOMContentLoaded', async function() {\r\n  console.log(\"Initializing page.\");\r\n  showMainLoading();\r\n\r\n  await window.firebaseReadyPromise;\r\n  console.log(\"Firebase ready. Current User:\", window.auth.currentUser ? window.auth.currentUser.uid : \"None\");\r\n\r\n  window.setupThemesFirebase(window.db, window.auth, window.appId);\r\n  console.log(\"Themes setup complete.\");\r\n\r\n  await window.loadNavbar(window.auth.currentUser, window.DEFAULT_PROFILE_PIC, window.DEFAULT_THEME_NAME);\r\n  console.log(\"Navbar loaded.\");\r\n\r\n  let userThemePreference = window.DEFAULT_THEME_NAME;\r\n  if (window.currentUser && window.currentUser.themePreference) {\r\n    userThemePreference = window.currentUser.themePreference;\r\n    console.log(\"User theme preference found:\", userThemePreference);\r\n  } else if (window.currentUser) {\r\n    console.log(\"No specific theme preference for logged-in user, using default.\");\r\n  } else {\r\n    console.log(\"No user logged in, using default theme.\");\r\n  }\r\n  const allThemes = await window.getAvailableThemes();\r\n  const themeToApply = allThemes.find(t => t.id === userThemePreference) || allThemes.find(t => t.id === window.DEFAULT_THEME_NAME);\r\n  window.applyTheme(themeToApply.id, themeToApply);\r\n  console.log(\"Theme applied.\");\r\n\r\n  onAuthStateChanged(window.auth, (user) => {\r\n    console.log(\"Auth state changed. User:\", user ? user.uid : \"None\");\r\n    updateUIBasedOnAuthAndData();\r\n  });\r\n\r\n  const currentYearElement = document.getElementById('current-year-forms');\r\n  if (currentYearElement) {\r\n    currentYearElement.textContent = new Date().getFullYear().toString();\r\n    console.log(\"Footer year set.\");\r\n  }\r\n\r\n  createThemaForm?.addEventListener('submit', async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Create Thema form submitted.\");\r\n    const name = newThemaNameInput.value.trim();\r\n    const description = newThemaDescriptionInput.value.trim();\r\n    if (name && description) {\r\n      await addThema(name, description);\r\n    } else {\r\n      showMessageBox(\"Please fill in both Théma Name and Description.\", true);\r\n      console.log(\"Missing thema name or description.\");\r\n    }\r\n  });\r\n  console.log(\"Create Théma form listener attached.\");\r\n\r\n  backToThematasBtn?.addEventListener('click', () => {\r\n    console.log(\"Back to Thémata button clicked.\");\r\n    threadsSection.style.display = 'none';\r\n    commentsSection.style.display = 'none';\r\n    if (document.getElementById('create-thema-section')) document.getElementById('create-thema-section').style.display = 'block';\r\n    if (themaList) themaList.style.display = 'block';\r\n    if (document.querySelector('#main-content > h2')) document.querySelector('#main-content > h2').style.display = 'block';\r\n    if (document.querySelector('#main-content > h3')) document.querySelector('#main-content > h3').style.display = 'block';\r\n\r\n    currentThemaId = null;\r\n    currentThreadId = null;\r\n    if (unsubscribeThemaComments) {\r\n      unsubscribeThemaComments();\r\n      unsubscribeThemaComments = null;\r\n    }\r\n    if (unsubscribeThreads) {\r\n      unsubscribeThreads();\r\n      unsubscribeThreads = null;\r\n    }\r\n    console.log(\"Returned to thémata list view.\");\r\n  });\r\n  console.log(\"Back to Thémata button listener attached.\");\r\n\r\n  createThreadForm?.addEventListener('submit', async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Create Thread form submitted.\");\r\n    const title = newThreadTitleInput.value.trim();\r\n    const initialComment = newThreadInitialCommentInput.value.trim();\r\n    if (currentThemaId && title && initialComment) {\r\n      await addCommentThread(currentThemaId, title, initialComment);\r\n    } else {\r\n      showMessageBox(\"Please fill in both Thread Title and Initial Comment.\", true);\r\n      console.log(\"Missing thread title or initial comment.\");\r\n    }\r\n  });\r\n  console.log(\"Create Thread form listener attached.\");\r\n\r\n  backToThreadsBtn?.addEventListener('click', () => {\r\n    console.log(\"Back to Threads button clicked.\");\r\n    commentsSection.style.display = 'none';\r\n    threadsSection.style.display = 'block';\r\n    currentThreadId = null;\r\n    if (unsubscribeThemaComments) {\r\n      unsubscribeThemaComments();\r\n      unsubscribeThemaComments = null;\r\n    }\r\n    console.log(\"Returned to threads list view.\");\r\n  });\r\n  console.log(\"Back to Threads button listener attached.\");\r\n\r\n  addCommentForm?.addEventListener('submit', async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Add Comment form submitted.\");\r\n    const content = newCommentContentInput.value.trim();\r\n    if (currentThemaId && currentThreadId && content) {\r\n      await addComment(currentThemaId, currentThreadId, content);\r\n    } else {\r\n      showMessageBox(\"Please type your comment.\", true);\r\n      console.log(\"Missing comment content.\");\r\n    }\r\n  });\r\n  console.log(\"Add Comment form listener attached.\");\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/forms.js b/forms.js
--- a/forms.js	(revision b4f63840be0c2f1cb29e5877d80a1536de676f46)
+++ b/forms.js	(date 1750912635116)
@@ -1,3 +1,6 @@
+/* jshint esversion: 11 */
+/* global __app_id, __firebase_config, __initial_auth_token */
+
 // forms.js: Centralized JavaScript for Forms page, encompassing Firebase, utilities, theme, navbar, and core forms logic.
 
 // --- Firebase SDK Imports ---
@@ -33,9 +36,9 @@
 const canvasAppId = typeof __app_id !== 'undefined' ? __app_id : null;
 window.appId = canvasAppId || firebaseConfig.projectId || 'default-app-id';
 
-window.app;
-window.auth;
-window.db;
+window.app = null; // Initialize to null
+window.auth = null; // Initialize to null
+window.db = null;   // Initialize to null
 window.currentUser = null;
 
 window.DEFAULT_PROFILE_PIC = 'https://placehold.co/32x32/1F2937/E5E7EB?text=AV';
@@ -508,15 +511,23 @@
 
 // Displays the main loading spinner.
 function showMainLoading() {
-  if (mainLoadingSpinner) mainLoadingSpinner.style.display = 'flex';
-  if (formsContentSection) formsContentSection.style.display = 'none';
-  if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'none';
+  if (mainLoadingSpinner) {
+    mainLoadingSpinner.style.display = 'flex';
+  }
+  if (formsContentSection) {
+    formsContentSection.style.display = 'none';
+  }
+  if (mainLoginRequiredMessage) {
+    mainLoginRequiredMessage.style.display = 'none';
+  }
   console.log("Spinner visible, content hidden.");
 }
 
 // Hides the main loading spinner.
 function hideMainLoading() {
-  if (mainLoadingSpinner) mainLoadingSpinner.style.display = 'none';
+  if (mainLoadingSpinner) {
+    mainLoadingSpinner.style.display = 'none';
+  }
   console.log("Spinner hidden.");
 }
 
@@ -539,20 +550,32 @@
     }
 
     if (profileReady) {
-      if (formsContentSection) formsContentSection.style.display = 'block';
-      if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'none';
+      if (formsContentSection) {
+        formsContentSection.style.display = 'block';
+      }
+      if (mainLoginRequiredMessage) {
+        mainLoginRequiredMessage.style.display = 'none';
+      }
       console.log("Forms content visible, login message hidden.");
       renderThematas();
     } else {
       console.warn("currentUser profile not fully loaded after waiting. Showing login message.");
       showMessageBox("Failed to load user profile. Please try refreshing or logging in again.", true);
-      if (formsContentSection) formsContentSection.style.display = 'none';
-      if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'block';
+      if (formsContentSection) {
+        formsContentSection.style.display = 'none';
+      }
+      if (mainLoginRequiredMessage) {
+        mainLoginRequiredMessage.style.display = 'block';
+      }
     }
   } else {
     console.log("User NOT logged in. Showing login message.");
-    if (formsContentSection) formsContentSection.style.display = 'none';
-    if (mainLoginRequiredMessage) mainLoginRequiredMessage.style.display = 'block';
+    if (formsContentSection) {
+      formsContentSection.style.display = 'none';
+    }
+    if (mainLoginRequiredMessage) {
+      mainLoginRequiredMessage.style.display = 'block';
+    }
   }
 }
 
@@ -722,7 +745,7 @@
     showMessageBox("You must be logged in to create a thread.", true);
     return;
   }
-  if (!window.db || !themaId) {
+  if (!window.db) {
     showMessageBox("Database or Théma not initialized.", true);
     return;
   }
@@ -1042,10 +1065,18 @@
     console.log("Back to Thémata button clicked.");
     threadsSection.style.display = 'none';
     commentsSection.style.display = 'none';
-    if (document.getElementById('create-thema-section')) document.getElementById('create-thema-section').style.display = 'block';
-    if (themaList) themaList.style.display = 'block';
-    if (document.querySelector('#main-content > h2')) document.querySelector('#main-content > h2').style.display = 'block';
-    if (document.querySelector('#main-content > h3')) document.querySelector('#main-content > h3').style.display = 'block';
+    if (document.getElementById('create-thema-section')) {
+      document.getElementById('create-thema-section').style.display = 'block';
+    }
+    if (themaList) {
+      themaList.style.display = 'block';
+    }
+    if (document.querySelector('#main-content > h2')) {
+      document.querySelector('#main-content > h2').style.display = 'block';
+    }
+    if (document.querySelector('#main-content > h3')) {
+      document.querySelector('#main-content > h3').style.display = 'block';
+    }
 
     currentThemaId = null;
     currentThreadId = null;
@@ -1070,7 +1101,7 @@
       await addCommentThread(currentThemaId, title, initialComment);
     } else {
       showMessageBox("Please fill in both Thread Title and Initial Comment.", true);
-      console.log("Missing thread title or initial comment.");
+      console.log("Missing title or initial comment.");
     }
   });
   console.log("Create Thread form listener attached.");
